package metrics

import (
	"net/http"
	"regexp"

	"github.com/prometheus/client_golang/prometheus"
	dto "github.com/prometheus/client_model/go"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	log "github.com/sirupsen/logrus"
)

// Map of all the registered Counters.
var registeredCounters = make(map[string]prometheus.Counter)

// Valid regex for prometheus model name.
// (Prometheus model reference: https://github.com/prometheus/common)
const validPrometheusName = "[^a-zA-Z_][^a-zA-Z0-9_]*"

// GetCounter return the prometheus counter of given name.
func GetCounter(name, namespace string) prometheus.Counter {
	// Validate and fix name (replace invalid chars with underscore "_").
	name = validateAndFix(name)
	if registeredCounters[name] == nil {
		log.Errorf("Error in metrics GetCounter: %s does not exist", name)
		// If registeredCounters[name] does not exists a new counter is created and returned.
		RegisterPrometheusCounter(name, "Autogenerated counter "+name, namespace)
		log.Warningf("Autogenerated: %s that does not exist", name)
	}

	return registeredCounters[name]
}

func GetCounterValue(name, namespace string) float64 {
	var m = &dto.Metric{}

	if err := GetCounter(name, namespace).Write(m); err != nil {
		log.Error(err)
		return 0
	}

	return m.Counter.GetValue()
}

// RegisterPrometheusCounter register a new Counter of given name with help text.
func RegisterPrometheusCounter(name, helpText, namespace string) {
	// Validate and fix name (replace invalid chars with underscore "_").
	name = validateAndFix(name)

	// Add counter in the map.
	registeredCounters[name] = prometheus.NewCounter(prometheus.CounterOpts{
		Name:      name,
		Namespace: "publiccode_crawler_" + namespace,
		Help:      helpText,
	})
	// Register counter in Prometheus service.
	err := prometheus.Register(registeredCounters[name])
	if err != nil {
		log.Warningf("Error in metrics RegisterPrometheusCounter: %v", err)
	}
}

// StartPrometheusMetricsServer starts a metric server handling
// "/metrics" on "localhost:8081" exposing the registered metrics.
func StartPrometheusMetricsServer() {
	http.Handle("/metrics", promhttp.Handler())

	err := http.ListenAndServe(":8081", nil)
	if err != nil {
		log.Warningf("monitoring endpoint non available: %v: ", err)
	}
}

// Validate and fix name (replace invalid chars with underscore "_").
func validateAndFix(name string) string {
	reg, err := regexp.Compile(validPrometheusName)
	if err != nil {
		log.Warningf("Error in metrics regex RegisterPrometheusCounter: %v", err)
	}

	// Replace invalid characters with a permitted one (undeerscore "_").
	name = reg.ReplaceAllString(name, "_")

	return name
}
